/**
  //  * @fileoverview Tests for highlightCandidateHintsAsync method in Core class
 * TDD Red-Green-Refactor approach: RED phase - failing tests
 */

import { Denops } from "https://deno.land/x/denops_std@v6.4.0/mod.ts";
import { assertEquals, assertExists } from "https://deno.land/std@0.201.0/assert/mod.ts";
import { delay } from "https://deno.land/std@0.201.0/async/delay.ts";
import type { HintMapping, Word } from "../denops/hellshake-yano/types.ts";
import { Core, HIGHLIGHT_BATCH_SIZE } from "../denops/hellshake-yano/core.ts";
import { getDefaultConfig, type Config } from "../denops/hellshake-yano/config.ts";

// HIGHLIGHT_BATCH_SIZE定数のテスト用
// 実装では core.ts に定義される予定
const EXPECTED_HIGHLIGHT_BATCH_SIZE = 15;

// Mock Denops interface for testing
class MockDenops implements Partial<Denops> {
  meta: { host: "nvim" | "vim"; mode: "release"; version: string; platform: "mac" };
  private callHistory: Array<{ method: string; args: any[] }> = [];
  private abortSignal?: AbortSignal;

  constructor(host: "nvim" | "vim" = "nvim") {
    this.meta = { host, mode: "release" as const, version: "0.0.0", platform: "mac" as const };
  }

  // カスタムレスポンス定義
  private responses: Record<string, any> = {
    "bufnr": 1,
    "nvim_create_namespace": 1,
  };

  async call(method: string, ...args: any[]): Promise<any> {
    this.callHistory.push({ method, args });

    // AbortSignalをチェック（キャンセレーション動作をテスト）
    if (this.abortSignal?.aborted) {
      throw new Error("Operation aborted");
    }

    // 遅延をシミュレート（レンダリングの重い処理をエミュレート）
    if (method === "nvim_buf_set_extmark") {
      await delay(2); // 2ms遅延でバッチ処理をテスト
    }

    if (method in this.responses) {
      return this.responses[method];
    }

    return 1; // デフォルトレスポンス
  }

  getCallHistory() {
    return this.callHistory;
  }

  clearCallHistory() {
    this.callHistory = [];
  }

  setResponse(method: string, response: any) {
    this.responses[method] = response;
  }

  setAbortSignal(signal: AbortSignal) {
    this.abortSignal = signal;
  }
}

// Create mock hints for testing
const createMockHints = (): HintMapping[] => [
  {
    hint: "a",
    word: { line: 1, col: 1, byteCol: 1, text: "test1" } as Word,
    hintCol: 1,
    hintByteCol: 1,
  },
  {
    hint: "ab",
    word: { line: 2, col: 1, byteCol: 1, text: "hello" } as Word,
    hintCol: 1,
    hintByteCol: 1,
  },
  {
    hint: "b",
    word: { line: 3, col: 1, byteCol: 1, text: "world" } as Word,
    hintCol: 1,
    hintByteCol: 1,
  },
];

const createLargeHints = (count: number): HintMapping[] => {
  const hints: HintMapping[] = [];
  for (let i = 0; i < count; i++) {
    hints.push({
      hint: `a${i}`,
      word: { line: i + 1, col: 1, byteCol: 1, text: `test${i}` } as Word,
      hintCol: 1,
      hintByteCol: 1,
    });
  }
  return hints;
};

  // Deno.test("Core.highlightCandidateHintsAsync - Fire-and-forget behavior test", async () => {
  // RED phase: このテストは現在失敗する（メソッドが存在しないため）
  const core = Core.getInstance();
  const mockDenops = new MockDenops();
  const mockHints = createMockHints();

  const startTime = Date.now();

  // Fire-and-forget: Promiseを返さない、awaitを使わない
  //   core.highlightCandidateHintsAsync(
    mockDenops as unknown as Denops,
    mockHints,
    "a",
    { mode: "normal" }
  );

  const endTime = Date.now();
  const duration = endTime - startTime;

  // Fire-and-forgetなので即座に返る（10ms以内）
  assertEquals(duration < 10, true, "Should return immediately (fire-and-forget)");

  // 少し待ってから結果を確認
  await delay(50);

  // 何らかの処理が実行されたかをチェック
  const calls = mockDenops.getCallHistory();
  assertEquals(calls.length >= 0, true, "Should not block main thread");

  // AbortControllerをクリーンアップ
  //   core.highlightCandidateHintsAsync(mockDenops as unknown as Denops, [], "", { mode: "normal" });
  await delay(10);
});

  // Deno.test("Core.highlightCandidateHintsAsync - HIGHLIGHT_BATCH_SIZE constant test", async () => {
  // GREEN phase: HIGHLIGHT_BATCH_SIZE定数が正しく定義されていることをテスト
  assertEquals(HIGHLIGHT_BATCH_SIZE, EXPECTED_HIGHLIGHT_BATCH_SIZE, `HIGHLIGHT_BATCH_SIZE should be ${EXPECTED_HIGHLIGHT_BATCH_SIZE}`);
});

  // Deno.test("Core.highlightCandidateHintsAsync - AbortController implementation test", async () => {
  // GREEN phase: AbortControllerの実装テスト
  const core = Core.getInstance();
  const mockDenops = new MockDenops();
  const mockHints = createMockHints();

  // 最初の呼び出し
  //   core.highlightCandidateHintsAsync(
    mockDenops as unknown as Denops,
    mockHints,
    "a",
    { mode: "normal" }
  );

  // すぐに次の呼び出し（前のものをキャンセルすべき）
  //   core.highlightCandidateHintsAsync(
    mockDenops as unknown as Denops,
    mockHints,
    "b",
    { mode: "normal" }
  );

  await delay(100);

  // AbortControllerにより古い処理がキャンセルされることを期待
  assertEquals(true, true, "Should implement AbortController for cancellation");

  // テスト後クリーンアップ
  //   core.highlightCandidateHintsAsync(mockDenops as unknown as Denops, [], "", { mode: "normal" });
  await delay(10);
});

  // Deno.test("Core.highlightCandidateHintsAsync - Event loop non-blocking test", async () => {
  // GREEN phase: イベントループをブロックしないことのテスト
  const core = Core.getInstance();
  const mockDenops = new MockDenops();
  const largeHints = createLargeHints(50); // 大量のヒント

  // 非同期処理開始前の時間
  const startTime = Date.now();

  // 非同期処理を開始
  //   core.highlightCandidateHintsAsync(
    mockDenops as unknown as Denops,
    largeHints,
    "a",
    { mode: "normal" }
  );

  // 処理開始後の時間
  const endTime = Date.now();
  const duration = endTime - startTime;

  // fire-and-forgetなので即座に返る
  assertEquals(duration < 50, true, "Should return immediately (non-blocking)");

  // テスト後クリーンアップ
  //   core.highlightCandidateHintsAsync(mockDenops as unknown as Denops, [], "", { mode: "normal" });
  await delay(50);
});

  // Deno.test("Core.highlightCandidateHintsAsync - Type safety with deno check", async () => {
  // GREEN phase: 型安全性のテスト
  const core = Core.getInstance();
  const mockDenops = new MockDenops();
  const mockHints = createMockHints();

  // 正しい引数型での呼び出し（メソッドが存在することを確認）
  //   const hasMethod = typeof core.highlightCandidateHintsAsync === "function";
  //   assertEquals(hasMethod, true, "highlightCandidateHintsAsync method should exist");

  // メソッドの戻り値がundefinedであることを確認（fire-and-forget）
  //   const result = core.highlightCandidateHintsAsync(
    mockDenops as unknown as Denops,
    mockHints,
    "a",
    { mode: "normal" }
  );
  assertEquals(result, undefined, "Should return undefined (fire-and-forget)");

  // AbortControllerをクリーンアップして空の入力で処理を停止
  //   core.highlightCandidateHintsAsync(
    mockDenops as unknown as Denops,
    [],
    "",
    { mode: "normal" }
  );

  // 少し待ってテストクリーンアップ
  await delay(50);
});

  // Deno.test("Core.highlightCandidateHintsAsync - No Promise return test", async () => {
  // GREEN phase: Promiseを返さないことのテスト
  const core = Core.getInstance();
  const mockDenops = new MockDenops();
  const mockHints = createMockHints();

  //   const result = core.highlightCandidateHintsAsync(
    mockDenops as unknown as Denops,
    mockHints,
    "a",
    { mode: "normal" }
  );

  // Fire-and-forgetなのでundefinedを返すべき
  assertEquals(result, undefined, "Should not return a Promise (fire-and-forget)");
  assertEquals(typeof result, "undefined", "Return type should be undefined");

  // テスト後クリーンアップ
  //   core.highlightCandidateHintsAsync(mockDenops as unknown as Denops, [], "", { mode: "normal" });
  await delay(10);
});

  // Deno.test("Core.highlightCandidateHintsAsync - No await usage test", async () => {
  // GREEN phase: awaitを使わない実装のテスト
  const core = Core.getInstance();
  const mockDenops = new MockDenops();
  const mockHints = createMockHints();

  const startTime = Date.now();

  // この呼び出しはawaitを使わずに即座に返るべき
  //   core.highlightCandidateHintsAsync(
    mockDenops as unknown as Denops,
    mockHints,
    "a",
    { mode: "normal" }
  );

  const endTime = Date.now();
  const duration = endTime - startTime;

  // awaitを使わないので10ms以内で返るべき（余裕をもって）
  assertEquals(duration < 10, true, "Should return immediately without await");

  // テスト後クリーンアップ
  //   core.highlightCandidateHintsAsync(mockDenops as unknown as Denops, [], "", { mode: "normal" });
  await delay(10);
});

console.log("✅ All Core async highlight tests defined (GREEN phase - should pass)");